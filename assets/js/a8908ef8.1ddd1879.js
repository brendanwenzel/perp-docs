"use strict";(self.webpackChunklushan_docs=self.webpackChunklushan_docs||[]).push([[662],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var d=i.createContext({}),u=function(e){var t=i.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=u(e.components);return i.createElement(d.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},s=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,d=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),s=u(n),m=r,g=s["".concat(d,".").concat(m)]||s[m]||p[m]||a;return n?i.createElement(g,o(o({ref:t},c),{},{components:n})):i.createElement(g,o({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=s;var l={};for(var d in t)hasOwnProperty.call(t,d)&&(l[d]=t[d]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var u=2;u<a;u++)o[u]=n[u];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}s.displayName="MDXCreateElement"},2981:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return d},metadata:function(){return u},toc:function(){return c},default:function(){return s}});var i=n(7462),r=n(3366),a=(n(7294),n(3905)),o=["components"],l={},d=void 0,u={unversionedId:"Contracts/OrderBook",id:"Contracts/OrderBook",isDocsHomePage:!1,title:"OrderBook",description:"Functions",source:"@site/docs/Contracts/OrderBook.md",sourceDirName:"Contracts",slug:"/Contracts/OrderBook",permalink:"/lushan-docs/docs/Contracts/OrderBook",editUrl:"https://github.com/perpetual-protocol/lushan-docs/main/docs/Contracts/OrderBook.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"MetaTxGateway",permalink:"/lushan-docs/docs/Contracts/MetaTxGateway"},next:{title:"QuoteToken",permalink:"/lushan-docs/docs/Contracts/QuoteToken"}},c=[{value:"Functions",id:"functions",children:[{value:"initialize",id:"initialize",children:[]},{value:"setExchange",id:"setexchange",children:[]},{value:"addLiquidity",id:"addliquidity",children:[]},{value:"removeLiquidity",id:"removeliquidity",children:[]},{value:"removeLiquidityByIds",id:"removeliquiditybyids",children:[]},{value:"updateFundingGrowthAndLiquidityCoefficientInFundingPayment",id:"updatefundinggrowthandliquiditycoefficientinfundingpayment",children:[]},{value:"uniswapV3MintCallback",id:"uniswapv3mintcallback",children:[]},{value:"replaySwap",id:"replayswap",children:[]},{value:"getOpenOrderIds",id:"getopenorderids",children:[]},{value:"getOpenOrderById",id:"getopenorderbyid",children:[]},{value:"getOpenOrder",id:"getopenorder",children:[]},{value:"hasOrder",id:"hasorder",children:[]},{value:"getTotalQuoteAmountInPools",id:"gettotalquoteamountinpools",children:[]},{value:"getTotalTokenAmountInPool",id:"gettotaltokenamountinpool",children:[]},{value:"getLiquidityCoefficientInFundingPayment",id:"getliquiditycoefficientinfundingpayment",children:[]},{value:"getFeeGrowthGlobal",id:"getfeegrowthglobal",children:[]},{value:"_removeLiquidity",id:"_removeliquidity",children:[]},{value:"_removeLiquidityFromOrder",id:"_removeliquidityfromorder",children:[]},{value:"_removeOrder",id:"_removeorder",children:[]},{value:"_addLiquidityToOrder",id:"_addliquiditytoorder",children:[]},{value:"_getTotalTokenAmountInPool",id:"_gettotaltokenamountinpool",children:[]},{value:"_getLiquidityCoefficientInFundingPaymentByOrder",id:"_getliquiditycoefficientinfundingpaymentbyorder",children:[]},{value:"_calcOwedFee",id:"_calcowedfee",children:[]}]},{value:"Events",id:"events",children:[{value:"LiquidityChanged",id:"liquiditychanged",children:[]}]}],p={toc:c};function s(e){var t=e.components,n=(0,r.Z)(e,o);return(0,a.kt)("wrapper",(0,i.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"functions"},"Functions"),(0,a.kt)("h3",{id:"initialize"},"initialize"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"  function initialize(\n  ) external\n")),(0,a.kt)("h3",{id:"setexchange"},"setExchange"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"  function setExchange(\n  ) external\n")),(0,a.kt)("h3",{id:"addliquidity"},"addLiquidity"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"  function addLiquidity(\n  ) external returns (struct OrderBook.AddLiquidityResponse)\n")),(0,a.kt)("h3",{id:"removeliquidity"},"removeLiquidity"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"  function removeLiquidity(\n  ) external returns (struct OrderBook.RemoveLiquidityResponse)\n")),(0,a.kt)("h3",{id:"removeliquiditybyids"},"removeLiquidityByIds"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"  function removeLiquidityByIds(\n  ) external returns (struct OrderBook.RemoveLiquidityResponse)\n")),(0,a.kt)("h3",{id:"updatefundinggrowthandliquiditycoefficientinfundingpayment"},"updateFundingGrowthAndLiquidityCoefficientInFundingPayment"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"  function updateFundingGrowthAndLiquidityCoefficientInFundingPayment(\n  ) external returns (int256 liquidityCoefficientInFundingPayment)\n")),(0,a.kt)("p",null,"this is the non-view version of getLiquidityCoefficientInFundingPayment()"),(0,a.kt)("h4",{id:"return-values"},"Return Values:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,a.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,a.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("inlineCode",{parentName:"td"},"liquidityCoefficientInFundingPayment")),(0,a.kt)("td",{parentName:"tr",align:"left"},"address"),(0,a.kt)("td",{parentName:"tr",align:"left"},"the funding payment of all orders/liquidity of a maker")))),(0,a.kt)("h3",{id:"uniswapv3mintcallback"},"uniswapV3MintCallback"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"  function uniswapV3MintCallback(\n    uint256 amount0Owed,\n    uint256 amount1Owed,\n    bytes data\n  ) external\n")),(0,a.kt)("p",null,"Called to ",(0,a.kt)("inlineCode",{parentName:"p"},"msg.sender")," after minting liquidity to a position from IUniswapV3Pool#mint."),(0,a.kt)("p",null,"In the implementation you must pay the pool tokens owed for the minted liquidity.\nThe caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory."),(0,a.kt)("h4",{id:"parameters"},"Parameters:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,a.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,a.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("inlineCode",{parentName:"td"},"amount0Owed")),(0,a.kt)("td",{parentName:"tr",align:"left"},"uint256"),(0,a.kt)("td",{parentName:"tr",align:"left"},"The amount of token0 due to the pool for the minted liquidity")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("inlineCode",{parentName:"td"},"amount1Owed")),(0,a.kt)("td",{parentName:"tr",align:"left"},"uint256"),(0,a.kt)("td",{parentName:"tr",align:"left"},"The amount of token1 due to the pool for the minted liquidity")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("inlineCode",{parentName:"td"},"data")),(0,a.kt)("td",{parentName:"tr",align:"left"},"bytes"),(0,a.kt)("td",{parentName:"tr",align:"left"},"Any data passed through by the caller via the IUniswapV3PoolActions#mint call")))),(0,a.kt)("h3",{id:"replayswap"},"replaySwap"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"  function replaySwap(\n  ) external returns (struct OrderBook.ReplaySwapResponse)\n")),(0,a.kt)("h3",{id:"getopenorderids"},"getOpenOrderIds"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"  function getOpenOrderIds(\n  ) external returns (bytes32[])\n")),(0,a.kt)("h3",{id:"getopenorderbyid"},"getOpenOrderById"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"  function getOpenOrderById(\n  ) external returns (struct OrderBook.OpenOrder)\n")),(0,a.kt)("h3",{id:"getopenorder"},"getOpenOrder"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"  function getOpenOrder(\n  ) external returns (struct OrderBook.OpenOrder)\n")),(0,a.kt)("h3",{id:"hasorder"},"hasOrder"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"  function hasOrder(\n  ) external returns (bool)\n")),(0,a.kt)("h3",{id:"gettotalquoteamountinpools"},"getTotalQuoteAmountInPools"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"  function getTotalQuoteAmountInPools(\n  ) external returns (uint256)\n")),(0,a.kt)("p",null,"note the return value includes maker fee.\nFor more details please refer to _getTotalTokenAmountInPool() docstring"),(0,a.kt)("h3",{id:"gettotaltokenamountinpool"},"getTotalTokenAmountInPool"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"  function getTotalTokenAmountInPool(\n  ) external returns (uint256 tokenAmount)\n")),(0,a.kt)("p",null,"the returned quote amount does not include funding payment because\nthe latter is counted directly toward realizedPnl.\nplease refer to _getTotalTokenAmountInPool() docstring for specs"),(0,a.kt)("h3",{id:"getliquiditycoefficientinfundingpayment"},"getLiquidityCoefficientInFundingPayment"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"  function getLiquidityCoefficientInFundingPayment(\n  ) external returns (int256 liquidityCoefficientInFundingPayment)\n")),(0,a.kt)("p",null,"this is the view version of updateFundingGrowthAndLiquidityCoefficientInFundingPayment()"),(0,a.kt)("h4",{id:"return-values-1"},"Return Values:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,a.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,a.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("inlineCode",{parentName:"td"},"liquidityCoefficientInFundingPayment")),(0,a.kt)("td",{parentName:"tr",align:"left"},"address"),(0,a.kt)("td",{parentName:"tr",align:"left"},"the funding payment of all orders/liquidity of a maker")))),(0,a.kt)("h3",{id:"getfeegrowthglobal"},"getFeeGrowthGlobal"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"  function getFeeGrowthGlobal(\n  ) external returns (uint256)\n")),(0,a.kt)("h3",{id:"_removeliquidity"},"_removeLiquidity"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"  function _removeLiquidity(\n  ) internal returns (struct OrderBook.RemoveLiquidityResponse)\n")),(0,a.kt)("h3",{id:"_removeliquidityfromorder"},"_removeLiquidityFromOrder"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"  function _removeLiquidityFromOrder(\n  ) internal returns (uint256)\n")),(0,a.kt)("h3",{id:"_removeorder"},"_removeOrder"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"  function _removeOrder(\n  ) internal\n")),(0,a.kt)("h3",{id:"_addliquiditytoorder"},"_addLiquidityToOrder"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"  function _addLiquidityToOrder(\n  ) internal returns (uint256)\n")),(0,a.kt)("h3",{id:"_gettotaltokenamountinpool"},"_getTotalTokenAmountInPool"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"  function _getTotalTokenAmountInPool(\n  ) internal returns (uint256 tokenAmount)\n")),(0,a.kt)("p",null,"Get total amount of the specified tokens in the specified pool.\nNote:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"   1. when querying quote amount, it includes Exchange fees, i.e.:\n      quote amount = quote liquidity + fees\n      base amount = base liquidity\n   2. quote/base liquidity does NOT include Uniswap pool fees since\n      they do not have any impact to our margin system\n")),(0,a.kt)("h3",{id:"_getliquiditycoefficientinfundingpaymentbyorder"},"_getLiquidityCoefficientInFundingPaymentByOrder"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"  function _getLiquidityCoefficientInFundingPaymentByOrder(\n  ) internal returns (int256)\n")),(0,a.kt)("p",null,"the funding payment of an order/liquidity is composed of"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"}," 1. funding accrued inside the range 2. funding accrued below the range\n there is no funding when the price goes above the range, as liquidity is all swapped into quoteToken\n")),(0,a.kt)("h4",{id:"return-values-2"},"Return Values:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,a.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,a.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("inlineCode",{parentName:"td"},"liquidityCoefficientInFundingPayment")),(0,a.kt)("td",{parentName:"tr",align:"left"},"struct OrderBook.OpenOrder"),(0,a.kt)("td",{parentName:"tr",align:"left"},"the funding payment of an order/liquidity")))),(0,a.kt)("h3",{id:"_calcowedfee"},"_calcOwedFee"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"  function _calcOwedFee(\n  ) internal returns (uint256)\n")),(0,a.kt)("p",null,"CANNOT use safeMath for feeGrowthInside calculation, as it can be extremely large and overflow\nthe difference between two feeGrowthInside, however, is correct and won't be affected by overflow or not"),(0,a.kt)("h2",{id:"events"},"Events"),(0,a.kt)("h3",{id:"liquiditychanged"},"LiquidityChanged"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"  event LiquidityChanged(\n  )\n")))}s.isMDXComponent=!0}}]);