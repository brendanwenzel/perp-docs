"use strict";(self.webpackChunklushan_docs=self.webpackChunklushan_docs||[]).push([[606],{3905:function(e,t,i){i.d(t,{Zo:function(){return u},kt:function(){return k}});var n=i(7294);function r(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function a(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,n)}return i}function l(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?a(Object(i),!0).forEach((function(t){r(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):a(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function o(e,t){if(null==e)return{};var i,n,r=function(e,t){if(null==e)return{};var i,n,r={},a=Object.keys(e);for(n=0;n<a.length;n++)i=a[n],t.indexOf(i)>=0||(r[i]=e[i]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)i=a[n],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(r[i]=e[i])}return r}var c=n.createContext({}),s=function(e){var t=n.useContext(c),i=t;return e&&(i="function"==typeof e?e(t):l(l({},t),e)),i},u=function(e){var t=s(e.components);return n.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var i=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),p=s(i),k=r,g=p["".concat(c,".").concat(k)]||p[k]||d[k]||a;return i?n.createElement(g,l(l({ref:t},u),{},{components:i})):n.createElement(g,l({ref:t},u))}));function k(e,t){var i=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=i.length,l=new Array(a);l[0]=p;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var s=2;s<a;s++)l[s]=i[s];return n.createElement.apply(null,l)}return n.createElement.apply(null,i)}p.displayName="MDXCreateElement"},4261:function(e,t,i){i.r(t),i.d(t,{frontMatter:function(){return o},contentTitle:function(){return c},metadata:function(){return s},toc:function(){return u},default:function(){return p}});var n=i(7462),r=i(3366),a=(i(7294),i(3905)),l=["components"],o={},c=void 0,s={unversionedId:"Libraries/UniswapV3Broker",id:"Libraries/UniswapV3Broker",isDocsHomePage:!1,title:"UniswapV3Broker",description:"Uniswap's v3 pool: token0 & token1",source:"@site/docs/Libraries/UniswapV3Broker.md",sourceDirName:"Libraries",slug:"/Libraries/UniswapV3Broker",permalink:"/lushan-docs/docs/Libraries/UniswapV3Broker",editUrl:"https://github.com/perpetual-protocol/lushan-docs/main/docs/Libraries/UniswapV3Broker.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Tick",permalink:"/lushan-docs/docs/Libraries/Tick"}},u=[{value:"Functions",id:"functions",children:[{value:"addLiquidity",id:"addliquidity",children:[]},{value:"removeLiquidity",id:"removeliquidity",children:[]},{value:"swap",id:"swap",children:[]},{value:"getPool",id:"getpool",children:[]},{value:"getTickSpacing",id:"gettickspacing",children:[]},{value:"getLiquidity",id:"getliquidity",children:[]},{value:"getSqrtMarkPriceX96",id:"getsqrtmarkpricex96",children:[]},{value:"getTick",id:"gettick",children:[]},{value:"getIsTickInitialized",id:"getistickinitialized",children:[]},{value:"getTickLiquidityNet",id:"gettickliquiditynet",children:[]},{value:"getSqrtMarkTwapX96",id:"getsqrtmarktwapx96",children:[]},{value:"getTickBitmap",id:"gettickbitmap",children:[]},{value:"getNextInitializedTickWithinOneWord",id:"getnextinitializedtickwithinoneword",children:[]},{value:"getSwapState",id:"getswapstate",children:[]}]}],d={toc:u};function p(e){var t=e.components,i=(0,r.Z)(e,l);return(0,a.kt)("wrapper",(0,n.Z)({},d,i,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Uniswap's v3 pool: token0 & token1\n-> token0's price = token1 / token0; tick index = log(1.0001, token0's price)\nOur system: base & quote\n-> base's price = quote / base; tick index = log(1.0001, base price)\nThus, we require that (base, quote) = (token0, token1) is always true for convenience"),(0,a.kt)("h2",{id:"functions"},"Functions"),(0,a.kt)("h3",{id:"addliquidity"},"addLiquidity"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"  function addLiquidity(\n  ) internal returns (struct UniswapV3Broker.AddLiquidityResponse)\n")),(0,a.kt)("h3",{id:"removeliquidity"},"removeLiquidity"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"  function removeLiquidity(\n  ) internal returns (struct UniswapV3Broker.RemoveLiquidityResponse response)\n")),(0,a.kt)("h3",{id:"swap"},"swap"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"  function swap(\n  ) internal returns (struct UniswapV3Broker.SwapResponse response)\n")),(0,a.kt)("h3",{id:"getpool"},"getPool"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"  function getPool(\n  ) internal returns (address)\n")),(0,a.kt)("h3",{id:"gettickspacing"},"getTickSpacing"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"  function getTickSpacing(\n  ) internal returns (int24 tickSpacing)\n")),(0,a.kt)("h3",{id:"getliquidity"},"getLiquidity"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"  function getLiquidity(\n  ) internal returns (uint128 liquidity)\n")),(0,a.kt)("h3",{id:"getsqrtmarkpricex96"},"getSqrtMarkPriceX96"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"  function getSqrtMarkPriceX96(\n  ) internal returns (uint160 sqrtMarkPrice)\n")),(0,a.kt)("h3",{id:"gettick"},"getTick"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"  function getTick(\n  ) internal returns (int24 tick)\n")),(0,a.kt)("h3",{id:"getistickinitialized"},"getIsTickInitialized"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"  function getIsTickInitialized(\n  ) internal returns (bool initialized)\n")),(0,a.kt)("h3",{id:"gettickliquiditynet"},"getTickLiquidityNet"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"  function getTickLiquidityNet(\n  ) internal returns (int128 liquidityNet)\n")),(0,a.kt)("h3",{id:"getsqrtmarktwapx96"},"getSqrtMarkTwapX96"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"  function getSqrtMarkTwapX96(\n  ) internal returns (uint160)\n")),(0,a.kt)("p",null,"if twapInterval < 10 (should be less than 1 block), return mark price without twap directly,\nas twapInterval is too short and makes getting twap over such a short period meaningless"),(0,a.kt)("h3",{id:"gettickbitmap"},"getTickBitmap"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"  function getTickBitmap(\n  ) internal returns (uint256 tickBitmap)\n")),(0,a.kt)("h3",{id:"getnextinitializedtickwithinoneword"},"getNextInitializedTickWithinOneWord"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"  function getNextInitializedTickWithinOneWord(\n    address isBaseToQuote\n  ) internal returns (int24 next, bool initialized)\n")),(0,a.kt)("h4",{id:"parameters"},"Parameters:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,a.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,a.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("inlineCode",{parentName:"td"},"isBaseToQuote")),(0,a.kt)("td",{parentName:"tr",align:"left"},"address"),(0,a.kt)("td",{parentName:"tr",align:"left"},"originally lte, meaning that the next tick < the current tick")))),(0,a.kt)("h3",{id:"getswapstate"},"getSwapState"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"  function getSwapState(\n  ) internal returns (struct UniswapV3Broker.SwapState)\n")))}p.isMDXComponent=!0}}]);