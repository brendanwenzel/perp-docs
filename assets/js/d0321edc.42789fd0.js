"use strict";(self.webpackChunklushan_docs=self.webpackChunklushan_docs||[]).push([[908],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return m}});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},d=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,l=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),p=c(n),m=i,k=p["".concat(s,".").concat(m)]||p[m]||u[m]||l;return n?a.createElement(k,r(r({ref:t},d),{},{components:n})):a.createElement(k,r({ref:t},d))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=n.length,r=new Array(l);r[0]=p;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:i,r[1]=o;for(var c=2;c<l;c++)r[c]=n[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},2165:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return d},default:function(){return p}});var a=n(7462),i=n(3366),l=(n(7294),n(3905)),r=["components"],o={},s=void 0,c={unversionedId:"Contracts/ClearingHouse",id:"Contracts/ClearingHouse",isDocsHomePage:!1,title:"ClearingHouse",description:"Functions",source:"@site/docs/Contracts/ClearingHouse.md",sourceDirName:"Contracts",slug:"/Contracts/ClearingHouse",permalink:"/lushan-docs/docs/Contracts/ClearingHouse",editUrl:"https://github.com/perpetual-protocol/lushan-docs/main/docs/Contracts/ClearingHouse.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"BaseToken",permalink:"/lushan-docs/docs/Contracts/BaseToken"},next:{title:"ClearingHouseConfig",permalink:"/lushan-docs/docs/Contracts/ClearingHouseConfig"}},d=[{value:"Functions",id:"functions",children:[{value:"initialize",id:"initialize",children:[]},{value:"setMaxTickCrossedWithinBlock",id:"setmaxtickcrossedwithinblock",children:[]},{value:"setTrustedForwarder",id:"settrustedforwarder",children:[]},{value:"addLiquidity",id:"addliquidity",children:[]},{value:"removeLiquidity",id:"removeliquidity",children:[]},{value:"openPosition",id:"openposition",children:[]},{value:"closePosition",id:"closeposition",children:[]},{value:"liquidate",id:"liquidate",children:[]},{value:"cancelExcessOrders",id:"cancelexcessorders",children:[]},{value:"cancelAllExcessOrders",id:"cancelallexcessorders",children:[]},{value:"uniswapV3MintCallback",id:"uniswapv3mintcallback",children:[]},{value:"uniswapV3SwapCallback",id:"uniswapv3swapcallback",children:[]},{value:"getMaxTickCrossedWithinBlock",id:"getmaxtickcrossedwithinblock",children:[]},{value:"getAccountValue",id:"getaccountvalue",children:[]},{value:"getOpenNotional",id:"getopennotional",children:[]},{value:"_cancelExcessOrders",id:"_cancelexcessorders",children:[]},{value:"_afterRemoveLiquidity",id:"_afterremoveliquidity",children:[]},{value:"_swapAndCalculateOpenNotional",id:"_swapandcalculateopennotional",children:[]},{value:"_realizePnl",id:"_realizepnl",children:[]},{value:"_swap",id:"_swap",children:[]},{value:"_removeLiquidity",id:"_removeliquidity",children:[]},{value:"_openPosition",id:"_openposition",children:[]},{value:"_closePosition",id:"_closeposition",children:[]},{value:"_isOverPriceLimit",id:"_isoverpricelimit",children:[]},{value:"_getSqrtPriceLimit",id:"_getsqrtpricelimit",children:[]},{value:"_getTotalCollateralValue",id:"_gettotalcollateralvalue",children:[]},{value:"_isIncreasePosition",id:"_isincreaseposition",children:[]},{value:"_msgSender",id:"_msgsender",children:[]},{value:"_msgData",id:"_msgdata",children:[]},{value:"_requireHasBaseToken",id:"_requirehasbasetoken",children:[]},{value:"_getFreeCollateralByRatio",id:"_getfreecollateralbyratio",children:[]},{value:"_requireEnoughFreeCollateral",id:"_requireenoughfreecollateral",children:[]},{value:"_checkSlippage",id:"_checkslippage",children:[]}]},{value:"Events",id:"events",children:[{value:"PositionChanged",id:"positionchanged",children:[]},{value:"PositionLiquidated",id:"positionliquidated",children:[]},{value:"ReferredPositionChanged",id:"referredpositionchanged",children:[]}]}],u={toc:d};function p(e){var t=e.components,n=(0,i.Z)(e,r);return(0,l.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"functions"},"Functions"),(0,l.kt)("h3",{id:"initialize"},"initialize"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"  function initialize(\n  ) public\n")),(0,l.kt)("p",null,"this function is public for testing"),(0,l.kt)("h3",{id:"setmaxtickcrossedwithinblock"},"setMaxTickCrossedWithinBlock"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"  function setMaxTickCrossedWithinBlock(\n  ) external\n")),(0,l.kt)("h3",{id:"settrustedforwarder"},"setTrustedForwarder"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"  function setTrustedForwarder(\n  ) external\n")),(0,l.kt)("h3",{id:"addliquidity"},"addLiquidity"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"  function addLiquidity(\n  ) external returns (struct ClearingHouse.AddLiquidityResponse)\n")),(0,l.kt)("h3",{id:"removeliquidity"},"removeLiquidity"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"  function removeLiquidity(\n  ) external returns (struct ClearingHouse.RemoveLiquidityResponse response)\n")),(0,l.kt)("h3",{id:"openposition"},"openPosition"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"  function openPosition(\n  ) external returns (uint256 deltaBase, uint256 deltaQuote)\n")),(0,l.kt)("h3",{id:"closeposition"},"closePosition"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"  function closePosition(\n  ) external returns (uint256 deltaBase, uint256 deltaQuote)\n")),(0,l.kt)("h3",{id:"liquidate"},"liquidate"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"  function liquidate(\n  ) external\n")),(0,l.kt)("h3",{id:"cancelexcessorders"},"cancelExcessOrders"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"  function cancelExcessOrders(\n  ) external\n")),(0,l.kt)("h3",{id:"cancelallexcessorders"},"cancelAllExcessOrders"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"  function cancelAllExcessOrders(\n  ) external\n")),(0,l.kt)("h3",{id:"uniswapv3mintcallback"},"uniswapV3MintCallback"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"  function uniswapV3MintCallback(\n    uint256 amount0Owed,\n    uint256 amount1Owed,\n    bytes data\n  ) external\n")),(0,l.kt)("p",null,"Called to ",(0,l.kt)("inlineCode",{parentName:"p"},"msg.sender")," after minting liquidity to a position from IUniswapV3Pool#mint."),(0,l.kt)("p",null,"In the implementation you must pay the pool tokens owed for the minted liquidity.\nThe caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory."),(0,l.kt)("h4",{id:"parameters"},"Parameters:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"amount0Owed")),(0,l.kt)("td",{parentName:"tr",align:"left"},"uint256"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The amount of token0 due to the pool for the minted liquidity")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"amount1Owed")),(0,l.kt)("td",{parentName:"tr",align:"left"},"uint256"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The amount of token1 due to the pool for the minted liquidity")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"data")),(0,l.kt)("td",{parentName:"tr",align:"left"},"bytes"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Any data passed through by the caller via the IUniswapV3PoolActions#mint call")))),(0,l.kt)("h3",{id:"uniswapv3swapcallback"},"uniswapV3SwapCallback"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"  function uniswapV3SwapCallback(\n    int256 amount0Delta,\n    int256 amount1Delta,\n    bytes data\n  ) external\n")),(0,l.kt)("p",null,"Called to ",(0,l.kt)("inlineCode",{parentName:"p"},"msg.sender")," after executing a swap via IUniswapV3Pool#swap."),(0,l.kt)("p",null,"In the implementation you must pay the pool tokens owed for the swap.\nThe caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\namount0Delta and amount1Delta can both be 0 if no tokens were swapped."),(0,l.kt)("h4",{id:"parameters-1"},"Parameters:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"amount0Delta")),(0,l.kt)("td",{parentName:"tr",align:"left"},"int256"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The amount of token0 that was sent (negative) or must be received (positive) by the pool by")))),(0,l.kt)("p",null,"the end of the swap. If positive, the callback must send that amount of token0 to the pool.\n|",(0,l.kt)("inlineCode",{parentName:"p"},"amount1Delta")," | int256 | The amount of token1 that was sent (negative) or must be received (positive) by the pool by\nthe end of the swap. If positive, the callback must send that amount of token1 to the pool.\n|",(0,l.kt)("inlineCode",{parentName:"p"},"data")," | bytes | Any data passed through by the caller via the IUniswapV3PoolActions#swap call"),(0,l.kt)("h3",{id:"getmaxtickcrossedwithinblock"},"getMaxTickCrossedWithinBlock"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"  function getMaxTickCrossedWithinBlock(\n  ) external returns (uint24)\n")),(0,l.kt)("h3",{id:"getaccountvalue"},"getAccountValue"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"  function getAccountValue(\n  ) public returns (int256)\n")),(0,l.kt)("p",null,"accountValue = totalCollateralValue + totalUnrealizedPnl, in the settlement token's decimals"),(0,l.kt)("h3",{id:"getopennotional"},"getOpenNotional"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"  function getOpenNotional(\n  ) public returns (int256)\n")),(0,l.kt)("p",null,"the amount of quote token paid for a position when opening"),(0,l.kt)("h3",{id:"_cancelexcessorders"},"_cancelExcessOrders"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"  function _cancelExcessOrders(\n  ) internal\n")),(0,l.kt)("h3",{id:"_afterremoveliquidity"},"_afterRemoveLiquidity"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"  function _afterRemoveLiquidity(\n  ) internal\n")),(0,l.kt)("h3",{id:"_swapandcalculateopennotional"},"_swapAndCalculateOpenNotional"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"  function _swapAndCalculateOpenNotional(\n  ) internal returns (struct ClearingHouse.SwapResponse)\n")),(0,l.kt)("h3",{id:"_realizepnl"},"_realizePnl"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"  function _realizePnl(\n  ) internal\n")),(0,l.kt)("p",null,"caller of this function must ensure there's enough available and debt of quote"),(0,l.kt)("h3",{id:"_swap"},"_swap"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"  function _swap(\n  ) internal returns (struct ClearingHouse.SwapResponse)\n")),(0,l.kt)("h3",{id:"_removeliquidity"},"_removeLiquidity"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"  function _removeLiquidity(\n  ) internal returns (struct ClearingHouse.RemoveLiquidityResponse)\n")),(0,l.kt)("h3",{id:"_openposition"},"_openPosition"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"  function _openPosition(\n  ) internal returns (struct ClearingHouse.SwapResponse)\n")),(0,l.kt)("p",null,"explainer diagram for the relationship between exchangedPositionNotional, fee and openNotional:\n",(0,l.kt)("a",{parentName:"p",href:"https://www.figma.com/file/xuue5qGH4RalX7uAbbzgP3/swap-accounting-and-events"},"https://www.figma.com/file/xuue5qGH4RalX7uAbbzgP3/swap-accounting-and-events")),(0,l.kt)("h3",{id:"_closeposition"},"_closePosition"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"  function _closePosition(\n  ) internal returns (struct ClearingHouse.SwapResponse)\n")),(0,l.kt)("h3",{id:"_isoverpricelimit"},"_isOverPriceLimit"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"  function _isOverPriceLimit(\n  ) internal returns (bool)\n")),(0,l.kt)("h3",{id:"_getsqrtpricelimit"},"_getSqrtPriceLimit"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"  function _getSqrtPriceLimit(\n  ) internal returns (uint160)\n")),(0,l.kt)("h3",{id:"_gettotalcollateralvalue"},"_getTotalCollateralValue"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"  function _getTotalCollateralValue(\n  ) internal returns (int256)\n")),(0,l.kt)("p",null,"the return value is in settlement token decimals"),(0,l.kt)("h3",{id:"_isincreaseposition"},"_isIncreasePosition"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"  function _isIncreasePosition(\n  ) internal returns (bool)\n")),(0,l.kt)("h3",{id:"_msgsender"},"_msgSender"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"  function _msgSender(\n  ) internal returns (address payable)\n")),(0,l.kt)("p",null,"return the sender of this call.\nif the call came through our trusted forwarder, return the original sender.\notherwise, return ",(0,l.kt)("inlineCode",{parentName:"p"},"msg.sender"),".\nshould be used in the contract anywhere instead of msg.sender"),(0,l.kt)("h3",{id:"_msgdata"},"_msgData"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"  function _msgData(\n  ) internal returns (bytes)\n")),(0,l.kt)("p",null,"return the msg.data of this call.\nif the call came through our trusted forwarder, then the real sender was appended as the last 20 bytes\nof the msg.data - so this method will strip those 20 bytes off.\notherwise, return ",(0,l.kt)("inlineCode",{parentName:"p"},"msg.data"),"\nshould be used in the contract instead of msg.data, where the difference matters (e.g. when explicitly\nsigning or hashing the"),(0,l.kt)("h3",{id:"_requirehasbasetoken"},"_requireHasBaseToken"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"  function _requireHasBaseToken(\n  ) internal\n")),(0,l.kt)("h3",{id:"_getfreecollateralbyratio"},"_getFreeCollateralByRatio"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"  function _getFreeCollateralByRatio(\n  ) internal returns (int256)\n")),(0,l.kt)("h3",{id:"_requireenoughfreecollateral"},"_requireEnoughFreeCollateral"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"  function _requireEnoughFreeCollateral(\n  ) internal\n")),(0,l.kt)("h3",{id:"_checkslippage"},"_checkSlippage"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"  function _checkSlippage(\n  ) internal\n")),(0,l.kt)("h2",{id:"events"},"Events"),(0,l.kt)("h3",{id:"positionchanged"},"PositionChanged"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"  event PositionChanged(\n  )\n")),(0,l.kt)("h3",{id:"positionliquidated"},"PositionLiquidated"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"  event PositionLiquidated(\n  )\n")),(0,l.kt)("h3",{id:"referredpositionchanged"},"ReferredPositionChanged"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"  event ReferredPositionChanged(\n  )\n")))}p.isMDXComponent=!0}}]);