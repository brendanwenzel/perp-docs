"use strict";(self.webpackChunklushan_docs=self.webpackChunklushan_docs||[]).push([[226],{3905:function(t,n,e){e.d(n,{Zo:function(){return p},kt:function(){return m}});var r=e(7294);function i(t,n,e){return n in t?Object.defineProperty(t,n,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[n]=e,t}function l(t,n){var e=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(t,n).enumerable}))),e.push.apply(e,r)}return e}function a(t){for(var n=1;n<arguments.length;n++){var e=null!=arguments[n]?arguments[n]:{};n%2?l(Object(e),!0).forEach((function(n){i(t,n,e[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(e)):l(Object(e)).forEach((function(n){Object.defineProperty(t,n,Object.getOwnPropertyDescriptor(e,n))}))}return t}function o(t,n){if(null==t)return{};var e,r,i=function(t,n){if(null==t)return{};var e,r,i={},l=Object.keys(t);for(r=0;r<l.length;r++)e=l[r],n.indexOf(e)>=0||(i[e]=t[e]);return i}(t,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(r=0;r<l.length;r++)e=l[r],n.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(t,e)&&(i[e]=t[e])}return i}var u=r.createContext({}),s=function(t){var n=r.useContext(u),e=n;return t&&(e="function"==typeof t?t(n):a(a({},n),t)),e},p=function(t){var n=s(t.components);return r.createElement(u.Provider,{value:n},t.children)},c={inlineCode:"code",wrapper:function(t){var n=t.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(t,n){var e=t.components,i=t.mdxType,l=t.originalType,u=t.parentName,p=o(t,["components","mdxType","originalType","parentName"]),d=s(e),m=i,k=d["".concat(u,".").concat(m)]||d[m]||c[m]||l;return e?r.createElement(k,a(a({ref:n},p),{},{components:e})):r.createElement(k,a({ref:n},p))}));function m(t,n){var e=arguments,i=n&&n.mdxType;if("string"==typeof t||i){var l=e.length,a=new Array(l);a[0]=d;var o={};for(var u in n)hasOwnProperty.call(n,u)&&(o[u]=n[u]);o.originalType=t,o.mdxType="string"==typeof t?t:i,a[1]=o;for(var s=2;s<l;s++)a[s]=e[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,e)}d.displayName="MDXCreateElement"},7070:function(t,n,e){e.r(n),e.d(n,{frontMatter:function(){return o},contentTitle:function(){return u},metadata:function(){return s},toc:function(){return p},default:function(){return d}});var r=e(7462),i=e(3366),l=(e(7294),e(3905)),a=["components"],o={},u=void 0,s={unversionedId:"Libraries/PerpSafeCast",id:"Libraries/PerpSafeCast",isDocsHomePage:!1,title:"PerpSafeCast",description:'copy from "@openzeppelin/contracts-upgradeable/utils/SafeCastUpgradeable.sol"',source:"@site/docs/Libraries/PerpSafeCast.md",sourceDirName:"Libraries",slug:"/Libraries/PerpSafeCast",permalink:"/lushan-docs/docs/Libraries/PerpSafeCast",editUrl:"https://github.com/perpetual-protocol/lushan-docs/main/docs/Libraries/PerpSafeCast.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"PerpMath",permalink:"/lushan-docs/docs/Libraries/PerpMath"},next:{title:"SettlementTokenMath",permalink:"/lushan-docs/docs/Libraries/SettlementTokenMath"}},p=[{value:"Functions",id:"functions",children:[{value:"toUint128",id:"touint128",children:[]},{value:"toUint64",id:"touint64",children:[]},{value:"toUint32",id:"touint32",children:[]},{value:"toUint16",id:"touint16",children:[]},{value:"toUint8",id:"touint8",children:[]},{value:"toUint256",id:"touint256",children:[]},{value:"toInt128",id:"toint128",children:[]},{value:"toInt64",id:"toint64",children:[]},{value:"toInt32",id:"toint32",children:[]},{value:"toInt16",id:"toint16",children:[]},{value:"toInt8",id:"toint8",children:[]},{value:"toInt256",id:"toint256",children:[]}]}],c={toc:p};function d(t){var n=t.components,e=(0,i.Z)(t,a);return(0,l.kt)("wrapper",(0,r.Z)({},c,e,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("p",null,'copy from "@openzeppelin/contracts-upgradeable/utils/SafeCastUpgradeable.sol"\nand rename to avoid naming conflict with uniswap'),(0,l.kt)("h2",{id:"functions"},"Functions"),(0,l.kt)("h3",{id:"touint128"},"toUint128"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"  function toUint128(\n  ) internal returns (uint128)\n")),(0,l.kt)("p",null,"Returns the downcasted uint128 from uint256, reverting on\noverflow (when the input is greater than largest uint128)."),(0,l.kt)("p",null,"Counterpart to Solidity's ",(0,l.kt)("inlineCode",{parentName:"p"},"uint128")," operator."),(0,l.kt)("p",null,"Requirements:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"input must fit into 128 bits")),(0,l.kt)("h3",{id:"touint64"},"toUint64"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"  function toUint64(\n  ) internal returns (uint64)\n")),(0,l.kt)("p",null,"Returns the downcasted uint64 from uint256, reverting on\noverflow (when the input is greater than largest uint64)."),(0,l.kt)("p",null,"Counterpart to Solidity's ",(0,l.kt)("inlineCode",{parentName:"p"},"uint64")," operator."),(0,l.kt)("p",null,"Requirements:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"input must fit into 64 bits")),(0,l.kt)("h3",{id:"touint32"},"toUint32"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"  function toUint32(\n  ) internal returns (uint32)\n")),(0,l.kt)("p",null,"Returns the downcasted uint32 from uint256, reverting on\noverflow (when the input is greater than largest uint32)."),(0,l.kt)("p",null,"Counterpart to Solidity's ",(0,l.kt)("inlineCode",{parentName:"p"},"uint32")," operator."),(0,l.kt)("p",null,"Requirements:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"input must fit into 32 bits")),(0,l.kt)("h3",{id:"touint16"},"toUint16"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"  function toUint16(\n  ) internal returns (uint16)\n")),(0,l.kt)("p",null,"Returns the downcasted uint16 from uint256, reverting on\noverflow (when the input is greater than largest uint16)."),(0,l.kt)("p",null,"Counterpart to Solidity's ",(0,l.kt)("inlineCode",{parentName:"p"},"uint16")," operator."),(0,l.kt)("p",null,"Requirements:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"input must fit into 16 bits")),(0,l.kt)("h3",{id:"touint8"},"toUint8"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"  function toUint8(\n  ) internal returns (uint8)\n")),(0,l.kt)("p",null,"Returns the downcasted uint8 from uint256, reverting on\noverflow (when the input is greater than largest uint8)."),(0,l.kt)("p",null,"Counterpart to Solidity's ",(0,l.kt)("inlineCode",{parentName:"p"},"uint8")," operator."),(0,l.kt)("p",null,"Requirements:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"input must fit into 8 bits.")),(0,l.kt)("h3",{id:"touint256"},"toUint256"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"  function toUint256(\n  ) internal returns (uint256)\n")),(0,l.kt)("p",null,"Converts a signed int256 into an unsigned uint256."),(0,l.kt)("p",null,"Requirements:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"input must be greater than or equal to 0.")),(0,l.kt)("h3",{id:"toint128"},"toInt128"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"  function toInt128(\n  ) internal returns (int128)\n")),(0,l.kt)("p",null,"Returns the downcasted int128 from int256, reverting on\noverflow (when the input is less than smallest int128 or\ngreater than largest int128)."),(0,l.kt)("p",null,"Counterpart to Solidity's ",(0,l.kt)("inlineCode",{parentName:"p"},"int128")," operator."),(0,l.kt)("p",null,"Requirements:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"input must fit into 128 bits")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Available since v3.1.")),(0,l.kt)("h3",{id:"toint64"},"toInt64"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"  function toInt64(\n  ) internal returns (int64)\n")),(0,l.kt)("p",null,"Returns the downcasted int64 from int256, reverting on\noverflow (when the input is less than smallest int64 or\ngreater than largest int64)."),(0,l.kt)("p",null,"Counterpart to Solidity's ",(0,l.kt)("inlineCode",{parentName:"p"},"int64")," operator."),(0,l.kt)("p",null,"Requirements:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"input must fit into 64 bits")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Available since v3.1.")),(0,l.kt)("h3",{id:"toint32"},"toInt32"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"  function toInt32(\n  ) internal returns (int32)\n")),(0,l.kt)("p",null,"Returns the downcasted int32 from int256, reverting on\noverflow (when the input is less than smallest int32 or\ngreater than largest int32)."),(0,l.kt)("p",null,"Counterpart to Solidity's ",(0,l.kt)("inlineCode",{parentName:"p"},"int32")," operator."),(0,l.kt)("p",null,"Requirements:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"input must fit into 32 bits")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Available since v3.1.")),(0,l.kt)("h3",{id:"toint16"},"toInt16"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"  function toInt16(\n  ) internal returns (int16)\n")),(0,l.kt)("p",null,"Returns the downcasted int16 from int256, reverting on\noverflow (when the input is less than smallest int16 or\ngreater than largest int16)."),(0,l.kt)("p",null,"Counterpart to Solidity's ",(0,l.kt)("inlineCode",{parentName:"p"},"int16")," operator."),(0,l.kt)("p",null,"Requirements:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"input must fit into 16 bits")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Available since v3.1.")),(0,l.kt)("h3",{id:"toint8"},"toInt8"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"  function toInt8(\n  ) internal returns (int8)\n")),(0,l.kt)("p",null,"Returns the downcasted int8 from int256, reverting on\noverflow (when the input is less than smallest int8 or\ngreater than largest int8)."),(0,l.kt)("p",null,"Counterpart to Solidity's ",(0,l.kt)("inlineCode",{parentName:"p"},"int8")," operator."),(0,l.kt)("p",null,"Requirements:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"input must fit into 8 bits.")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Available since v3.1.")),(0,l.kt)("h3",{id:"toint256"},"toInt256"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"  function toInt256(\n  ) internal returns (int256)\n")),(0,l.kt)("p",null,"Converts an unsigned uint256 into a signed int256."),(0,l.kt)("p",null,"Requirements:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"input must be less than or equal to maxInt256.")))}d.isMDXComponent=!0}}]);