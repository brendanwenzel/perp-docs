"use strict";(self.webpackChunkperp_docs=self.webpackChunkperp_docs||[]).push([[661],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>c});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var u=a.createContext({}),s=function(e){var t=a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=s(e.components);return a.createElement(u.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,l=e.originalType,u=e.parentName,p=r(e,["components","mdxType","originalType","parentName"]),m=s(n),c=i,k=m["".concat(u,".").concat(c)]||m[c]||d[c]||l;return n?a.createElement(k,o(o({ref:t},p),{},{components:n})):a.createElement(k,o({ref:t},p))}));function c(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=n.length,o=new Array(l);o[0]=m;var r={};for(var u in t)hasOwnProperty.call(t,u)&&(r[u]=t[u]);r.originalType=e,r.mdxType="string"==typeof e?e:i,o[1]=r;for(var s=2;s<l;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5670:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>o,default:()=>d,frontMatter:()=>l,metadata:()=>r,toc:()=>s});var a=n(7462),i=(n(7294),n(3905));const l={id:"integration-guide",title:"Perp v2 Integration Guide",sidebar_position:1},o=void 0,r={unversionedId:"guides/integration-guide",id:"guides/integration-guide",title:"Perp v2 Integration Guide",description:"Which contracts should I be interacting with?",source:"@site/docs/guides/IntegrationGuide.md",sourceDirName:"guides",slug:"/guides/integration-guide",permalink:"/docs/guides/integration-guide",draft:!1,editUrl:"https://github.com/perpetual-protocol/perp-docs/tree/main/docs/guides/IntegrationGuide.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{id:"integration-guide",title:"Perp v2 Integration Guide",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"VirtualToken",permalink:"/docs/contracts/VirtualToken"},next:{title:"Data Source",permalink:"/docs/guides/data-source"}},u={},s=[{value:"Which contracts should I be interacting with?",id:"which-contracts-should-i-be-interacting-with",level:2},{value:"Install Curie npm package",id:"install-curie-npm-package",level:3},{value:"Vault",id:"vault",level:2},{value:"Deposit",id:"deposit",level:3},{value:"<code>Vault.deposit</code>",id:"vaultdeposit",level:4},{value:"Withdraw",id:"withdraw",level:3},{value:"<code>Vault.getFreeCollateral</code>",id:"vaultgetfreecollateral",level:4},{value:"<code>Vault.withdraw</code>",id:"vaultwithdraw",level:4},{value:"ClearingHouse",id:"clearinghouse",level:2},{value:"Open Position",id:"open-position",level:3},{value:"<code>ClearingHouse.openPosition</code>",id:"clearinghouseopenposition",level:4},{value:"Close Position",id:"close-position",level:3},{value:"<code>ClearingHouse.closePosition</code>",id:"clearinghousecloseposition",level:4},{value:"Add Liquidity",id:"add-liquidity",level:3},{value:"<code>ClearingHouse.addLiquidity</code>",id:"clearinghouseaddliquidity",level:4},{value:"Remove Liquidity",id:"remove-liquidity",level:3},{value:"<code>ClearingHouse.removeLiquidity</code>",id:"clearinghouseremoveliquidity",level:4},{value:"Get Account Value",id:"get-account-value",level:3},{value:"<code>ClearingHouse.getAccountValue</code>",id:"clearinghousegetaccountvalue",level:4}],p={toc:s};function d(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"which-contracts-should-i-be-interacting-with"},"Which contracts should I be interacting with?"),(0,i.kt)("p",null,"There are three main contracts:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"Vault"),": where all users' funds are stored, including USDC and non-USDC collaterals"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"ClearingHouse"),":",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"the main component that manages all markets of Perp v2"),(0,i.kt)("li",{parentName:"ul"},"As a taker, one can open or close positions"),(0,i.kt)("li",{parentName:"ul"},"As a maker, one can add or remove liquidity "),(0,i.kt)("li",{parentName:"ul"},"As a liquidator, one can liquidate someone's position that is close to or already bankrupt and get liquidation fees as the reward"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"AccountBalance"),": where most of the information of a trader can be queried, such as position size, position value, etc")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"install-curie-npm-package"},"Install Curie npm package"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"npm install @perp/curie-contract \n")),(0,i.kt)("p",null,"Node version: 12 (or 16 for M1 CPU)"),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"vault"},"Vault"),(0,i.kt)("p",null,"This contract is mainly used for depositing and withdrawing collaterals."),(0,i.kt)("h3",{id:"deposit"},"Deposit"),(0,i.kt)("h4",{id:"vaultdeposit"},(0,i.kt)("inlineCode",{parentName:"h4"},"Vault.deposit")),(0,i.kt)("p",null,"Deposit collateral"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"function deposit(address token, uint256 amount) external;\n")),(0,i.kt)("p",null,"Parameters:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"token"),": the address of the collateral"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"amount"),": the amount to be deposited")),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"IVault(VAULT_ADDR).deposit(TOKEN_ADDR, AMOUNT)\n")),(0,i.kt)("h3",{id:"withdraw"},"Withdraw"),(0,i.kt)("p",null,"When withdrawing collaterals, one can withdraw the amount up to one's ",(0,i.kt)("inlineCode",{parentName:"p"},"freeCollateral"),". This ensures that one's positions are always sufficiently collateralized."),(0,i.kt)("h4",{id:"vaultgetfreecollateral"},(0,i.kt)("inlineCode",{parentName:"h4"},"Vault.getFreeCollateral")),(0,i.kt)("p",null,"How many collaterals a trader can withdraw"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"function getFreeCollateral(address trader) external view returns (uint256);\n")),(0,i.kt)("p",null,"Parameter:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"trader"),": the address of the trader")),(0,i.kt)("hr",null),(0,i.kt)("h4",{id:"vaultwithdraw"},(0,i.kt)("inlineCode",{parentName:"h4"},"Vault.withdraw")),(0,i.kt)("p",null,"Withdraw collaterals of the specified amount"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"function withdraw(address token, uint256 amount) external;\n")),(0,i.kt)("p",null,"Parameters:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"token"),": the address of the collateral"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"amount"),": the amount to be withdrawn, which should not exceed ",(0,i.kt)("inlineCode",{parentName:"li"},"freeCollateral"))),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"IVault vault = IVault(VAULT_ADDR);\n\nuint256 freeCollateral = vault.getFreeCollateral(TRADER_ADDR);\n\nvault.withdraw(TOKEN_ADDR, AMOUNT);\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"clearinghouse"},"ClearingHouse"),(0,i.kt)("p",null,"ClearingHouse manages all markets of Perp v2."),(0,i.kt)("p",null,"For each market, we deploy a pair of two virtual tokens (with no real value) and initiate a new Uniswap V3 pool to provide liquidity to."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Base token: the virtual underlying asset users are trading for, such as vETH, vBTC"),(0,i.kt)("li",{parentName:"ul"},"Quote token: the counter currency of base token, which is always vUSDC for any base token")),(0,i.kt)("h3",{id:"open-position"},"Open Position"),(0,i.kt)("h4",{id:"clearinghouseopenposition"},(0,i.kt)("inlineCode",{parentName:"h4"},"ClearingHouse.openPosition")),(0,i.kt)("p",null,"Open a new position or adjust the position size of an existing one"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"struct OpenPositionParams {\n    address baseToken;\n    bool isBaseToQuote;\n    bool isExactInput;\n    uint256 amount;\n    uint256 oppositeAmountBound;\n    uint256 deadline;\n    uint160 sqrtPriceLimitX96;\n    bytes32 referralCode;\n}\n\nfunction openPosition(OpenPositionParams memory params) external returns (uint256 base, uint256 quote);\n")),(0,i.kt)("p",null,"Parameters:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"baseToken"),": the address of the base token, which suggests the market to trade in"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"isBaseToQuote"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"true")," for shorting the base token asset and ",(0,i.kt)("inlineCode",{parentName:"li"},"false")," for longing"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"isExactInput"),": for specifying ",(0,i.kt)("inlineCode",{parentName:"li"},"exactInput")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"exactOutput")," ; similar to UniSwap V2's specs"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"amount"),": the amount specified. Depending on the ",(0,i.kt)("inlineCode",{parentName:"li"},"isExactInput")," parameter, this can be either the input amount or output amount."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"oppositeAmountBound"),": the restriction on how many token to receive/pay, depending on ",(0,i.kt)("inlineCode",{parentName:"li"},"isBaseToQuote")," & ",(0,i.kt)("inlineCode",{parentName:"li"},"isExactInput"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"isBaseToQuote")," && ",(0,i.kt)("inlineCode",{parentName:"li"},"isExactInput"),": want more output quote as possible, so we set a lower bound of output quote"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"isBaseToQuote")," && ",(0,i.kt)("inlineCode",{parentName:"li"},"!isExactInput"),": want less input base as possible, so we set a upper bound of input base"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"!isBaseToQuote")," && ",(0,i.kt)("inlineCode",{parentName:"li"},"isExactInput"),": want more output base as possible, so we set a lower bound of output base"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"!isBaseToQuote")," && ",(0,i.kt)("inlineCode",{parentName:"li"},"!isExactInput"),": want less input quote as possible, so we set a upper bound of input quote"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"deadline"),": the restriction on when the tx should be executed; otherwise, tx will get reverted"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"sqrtPriceLimitX96"),": the restriction on the ending price after the swap; ",(0,i.kt)("inlineCode",{parentName:"li"},"0")," for no limit. This is the same as ",(0,i.kt)("inlineCode",{parentName:"li"},"sqrtPriceLimitX96")," in the UniSwap V3 contract."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"referralCode"),": the referral code for partners")),(0,i.kt)("p",null,"Return values:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"base"),": the amount of base token exchanged"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"quote"),": the amount of quote token exchanged")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Long 1 vETH")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"ClearingHouse clearingHouse = ClearingHouse(CH_ADDR);\n\nIClearingHouse.OpenPositionParams params = IClearingHouse.OpenPositionParams({\n    baseToken: VETH_ADDR,\n    isBaseToQuote: false, // false for longing\n    isExactInput: false, // false for specifying the output vETH amount\n    amount: 1 ether,\n    oppositeAmountBound: 0, // no amount limit\n    sqrtPriceLimitX96: 0 // no price limit\n    deadline: block.timestamp + 900, // take 15 minutes for example\n    referralCode: 0x0000000000000000000000000000000000000000000000000000000000000000 // no referral code\n})\n\n// quote is the amount of quote token the taker pays\n// base is the amount of base token the taker gets\n(uint256 base, uint256 quote) = clearingHouse.openPosition(params)\n")),(0,i.kt)("h3",{id:"close-position"},"Close Position"),(0,i.kt)("p",null,"Close an existing position"),(0,i.kt)("h4",{id:"clearinghousecloseposition"},(0,i.kt)("inlineCode",{parentName:"h4"},"ClearingHouse.closePosition")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"struct ClosePositionParams {\n    address baseToken;\n    uint160 sqrtPriceLimitX96;\n    uint256 oppositeAmountBound;\n    uint256 deadline;\n    bytes32 referralCode;\n}\n\nfunction closePosition(ClosePositionParams calldata params) external returns (uint256 base, uint256 quote);\n")),(0,i.kt)("p",null,"The params are pretty much the same as ",(0,i.kt)("inlineCode",{parentName:"p"},"openPosition"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Close the 1 vETH long position in the above example of ",(0,i.kt)("inlineCode",{parentName:"li"},"openPosition"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"ClearingHouse clearingHouse = ClearingHouse(CH_ADDR);\n\nIClearingHouse.ClosePositionParams params = IClearingHouse.ClosePositionParams({\n    baseToken: VETH_ADDR,\n    sqrtPriceLimitX96: 0, \n    oppositeAmountBound: 0,\n    deadline: block.timestamp + 900,\n    referralCode: 0x0000000000000000000000000000000000000000000000000000000000000000 \n})\n\n(uint256 base, uint256 quote) = clearingHouse.closePosition(params)\n")),(0,i.kt)("h3",{id:"add-liquidity"},"Add Liquidity"),(0,i.kt)("h4",{id:"clearinghouseaddliquidity"},(0,i.kt)("inlineCode",{parentName:"h4"},"ClearingHouse.addLiquidity")),(0,i.kt)("p",null,"Provide liquidity"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"struct AddLiquidityParams {\n    address baseToken;\n    uint256 base;\n    uint256 quote;\n    int24 lowerTick;\n    int24 upperTick;\n    uint256 minBase;\n    uint256 minQuote;\n    uint256 deadline;\n}\n\nstruct AddLiquidityResponse {\n    uint256 base;\n    uint256 quote;\n    uint256 fee;\n    uint256 liquidity;\n}\n\nfunction addLiquidity(AddLiquidityParams calldata params) external returns (AddLiquidityResponse memory)\n")),(0,i.kt)("p",null,"Parameters:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"baseToken"),": the base token address"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"base"),": the amount of base token you want to provide"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"quote"),": the amount of quote token you want to provide"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"lowerTick"),": lower tick of liquidity range, same as UniSwap V3"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"upperTick"),": upper tick of liquidity range, same as UniSwap V3"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"minBase"),": the minimum amount of base token you'd like to provide"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"minQuote"),": the minimum amount of quote token you'd like to provide"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"deadline"),": a time after which the transaction can no longer be executed")),(0,i.kt)("p",null,"Return values:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"base"),": the amount of base token added to the pool"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"quote"),": the amount of quote token added to the pool"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"fee"),": the amount of fee collected if there is any"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"liquidity"),": the amount of liquidity added to the pool, derived from ",(0,i.kt)("inlineCode",{parentName:"li"},"base")," & ",(0,i.kt)("inlineCode",{parentName:"li"},"quote"))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Provide liquidity to vETH/vUSDC pair with 2 vETH and 100 vUSDC, in the ",(0,i.kt)("strong",{parentName:"li"},"tick")," range [50000, 51000)",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"The range for liquidity on Perp V2 and Uniswap V3 is always expressed in tick")))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"ClearingHouse clearingHouse = ClearingHouse(CH_ADDR);\n\nIClearingHouse.AddLiquidityParams params = ClearingHouse.AddLiquidityParams({\n    baseToken: VETH_ADDR,\n    base: 2 ether,\n    quote: 100 ether,\n    lowerTick: 50000,\n    upperTick: 51000,\n    minBase: 0,\n    minQuote: 0,\n    deadline: block.timestamp\n})\n\nIClearingHouse.AddLiquidityResponse memory response = clearingHouse.addLiquidity(params);\n")),(0,i.kt)("h3",{id:"remove-liquidity"},"Remove Liquidity"),(0,i.kt)("h4",{id:"clearinghouseremoveliquidity"},(0,i.kt)("inlineCode",{parentName:"h4"},"ClearingHouse.removeLiquidity")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"struct RemoveLiquidityParams {\n    address baseToken;\n    int24 lowerTick;\n    int24 upperTick;\n    uint128 liquidity;\n    uint256 minBase;\n    uint256 minQuote;\n    uint256 deadline;\n}\n\nstruct RemoveLiquidityResponse {\n    uint256 base;\n    uint256 quote;\n    uint256 fee;\n}\n\nfunction removeLiquidity(RemoveLiquidityParams calldata params) external returns (RemoveLiquidityResponse memory)\n")),(0,i.kt)("p",null,"Parameters:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"baseToken"),": the address of base token"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"lowerTick"),": lower tick of liquidity range, same as UniSwap V3"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"upperTick"),": upper tick of liquidity range, same as UniSwap V3"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"liquidity"),": how much liquidity you want to remove, same as UniSwap V3"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"minBase"),": the minimum amount of base token you want to remove"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"minQuote"),": the minimum amount of quote token you want to remove"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"deadline"),": a time after which the transaction can no longer be executed")),(0,i.kt)("p",null,"Return values:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"base"),": the amount of base token removed from pool"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"quote"),": the amount of quote token removed from pool"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"fee"),": the amount of fee collected if there is any")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Remove 12 units of liquidity from vETH/vUSDC pair, in the tick range [50000, 51000) with a minimum requirement of 1 ETH that should be successfully removed")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"ClearingHouse clearingHouse = ClearingHouse(CH_ADDR);\n\nIClearingHouse.RemoveLiquidityParams params = ClearingHouse.RemoveLiquidityParams({\n    baseToken: VETH_ADDR,\n    lowerTick: 50000,\n    upperTick: 51000,\n    liquidity: 12,\n    minBase: 1 ether,\n    minQuote: 0,\n    deadline: block.timestamp\n})\n\nRemoveLiquidityResponse memory response = clearingHouse.removeLiquidity(params);\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Collect maker's fees by ",(0,i.kt)("strong",{parentName:"li"},"removing zero liquidity"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"ClearingHouse clearingHouse = ClearingHouse(CH_ADDR);\n\nIClearingHouse.RemoveLiquidityParams params = ClearingHouse.RemoveLiquidityParams({\n    baseToken: VETH_ADDR,\n    lowerTick: 50000,\n    upperTick: 51000,\n    liquidity: 0, // removing 0 liquidity is interpreted as to collect the accumulated swapping fees since last collection\n    minBase: 0,\n    minQuote: 0,\n    deadline: block.timestamp\n})\n\n// response.fee is the fees a maker gets\nRemoveLiquidityResponse memory response = clearingHouse.addLiquidity(params)\n")),(0,i.kt)("h3",{id:"get-account-value"},"Get Account Value"),(0,i.kt)("h4",{id:"clearinghousegetaccountvalue"},(0,i.kt)("inlineCode",{parentName:"h4"},"ClearingHouse.getAccountValue")),(0,i.kt)("p",null,"Get the total worth of one's positions denominated in USDC"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"function getAccountValue(address trader) public view returns (int256);\n")),(0,i.kt)("p",null,"Parameter:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"account"),": the address of the trader")))}d.isMDXComponent=!0}}]);